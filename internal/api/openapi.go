// Package Openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Openapi

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
	"net/http"
)

// Error defines model for Error.
type Error struct {
	Field  *string `json:"field,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// Errors defines model for Errors.
type Errors struct {
	Errors *[]Error `json:"errors,omitempty"`
}

// Healthcheck defines model for Healthcheck.
type Healthcheck struct {
	Version string `json:"version"`
}

// Slice defines model for Slice.
type Slice struct {
	Count  int  `json:"count"`
	Offset *int `json:"offset,omitempty"`
}

// User defines model for User.
type User struct {
	Birthday  *openapi_types.Date `json:"birthday,omitempty"`
	Email     string              `json:"email"`
	FirstName string              `json:"firstName"`
	Id        *string             `json:"id,omitempty"`
	LastName  *string             `json:"lastName,omitempty"`
}

// Id defines model for id.
type Id string

// Limit defines model for limit.
type Limit int

// Offset defines model for offset.
type Offset int

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse Errors

// Healthcheck200 defines model for Healthcheck200.
type Healthcheck200 Healthcheck

// UnauthorizedError defines model for UnauthorizedError.
type UnauthorizedError Errors

// User200 defines model for User200.
type User200 User

// Users200 defines model for Users200.
type Users200 struct {
	// Embedded struct due to allOf(#/components/schemas/Slice)
	Slice
	// Embedded fields due to inline allOf schema
	Data *[]User `json:"data,omitempty"`
}

// PostAuthEmailChangeParams defines parameters for PostAuthEmailChange.
type PostAuthEmailChangeParams struct {
	ContentType   string `json:"Content-Type"`
	Authorization string `json:"Authorization"`
}

// PostAuthEmailChangeConfirmJSONBody defines parameters for PostAuthEmailChangeConfirm.
type PostAuthEmailChangeConfirmJSONBody struct {
	Email string `json:"email"`
	Key   string `json:"key"`
}

// PostAuthEmailChangeConfirmParams defines parameters for PostAuthEmailChangeConfirm.
type PostAuthEmailChangeConfirmParams struct {
	ContentType   string `json:"Content-Type"`
	Authorization string `json:"Authorization"`
}

// PostAuthLoginJSONBody defines parameters for PostAuthLogin.
type PostAuthLoginJSONBody struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// PostAuthLoginParams defines parameters for PostAuthLogin.
type PostAuthLoginParams struct {
	ContentType string `json:"Content-Type"`
}

// PostAuthPasswordResetJSONBody defines parameters for PostAuthPasswordReset.
type PostAuthPasswordResetJSONBody struct {
	Email string `json:"email"`
}

// PostAuthPasswordResetParams defines parameters for PostAuthPasswordReset.
type PostAuthPasswordResetParams struct {
	ContentType   string `json:"Content-Type"`
	Authorization string `json:"Authorization"`
}

// PostAuthPasswordResetConfirmJSONBody defines parameters for PostAuthPasswordResetConfirm.
type PostAuthPasswordResetConfirmJSONBody struct {
	Key      string `json:"key"`
	Password string `json:"password"`
}

// PostAuthPasswordResetConfirmParams defines parameters for PostAuthPasswordResetConfirm.
type PostAuthPasswordResetConfirmParams struct {
	ContentType   string `json:"Content-Type"`
	Authorization string `json:"Authorization"`
}

// PostAuthRegisterJSONBody defines parameters for PostAuthRegister.
type PostAuthRegisterJSONBody User

// PostAuthResendVerificationEmailParams defines parameters for PostAuthResendVerificationEmail.
type PostAuthResendVerificationEmailParams struct {
	ContentType   string `json:"Content-Type"`
	Authorization string `json:"Authorization"`
}

// PostAuthUserConfirmJSONBody defines parameters for PostAuthUserConfirm.
type PostAuthUserConfirmJSONBody struct {
	Key string `json:"key"`
}

// PostAuthUserConfirmParams defines parameters for PostAuthUserConfirm.
type PostAuthUserConfirmParams struct {
	ContentType string `json:"Content-Type"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {

	// The numbers of items to return.
	Limit *Limit `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *Offset `json:"offset,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody User

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody User

// PostAuthEmailChangeConfirmRequestBody defines body for PostAuthEmailChangeConfirm for application/json ContentType.
type PostAuthEmailChangeConfirmJSONRequestBody PostAuthEmailChangeConfirmJSONBody

// PostAuthLoginRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody PostAuthLoginJSONBody

// PostAuthPasswordResetRequestBody defines body for PostAuthPasswordReset for application/json ContentType.
type PostAuthPasswordResetJSONRequestBody PostAuthPasswordResetJSONBody

// PostAuthPasswordResetConfirmRequestBody defines body for PostAuthPasswordResetConfirm for application/json ContentType.
type PostAuthPasswordResetConfirmJSONRequestBody PostAuthPasswordResetConfirmJSONBody

// PostAuthRegisterRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody PostAuthRegisterJSONBody

// PostAuthUserConfirmRequestBody defines body for PostAuthUserConfirm for application/json ContentType.
type PostAuthUserConfirmJSONRequestBody PostAuthUserConfirmJSONBody

// CreateUserRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Initiate user email address change.// (POST /auth/email-change)
	PostAuthEmailChange(ctx echo.Context, params PostAuthEmailChangeParams) error
	// Confirm user email address change.// (POST /auth/email-change-confirm)
	PostAuthEmailChangeConfirm(ctx echo.Context, params PostAuthEmailChangeConfirmParams) error
	// Login and retrieve an user token.// (POST /auth/login)
	PostAuthLogin(ctx echo.Context, params PostAuthLoginParams) error
	// Initiate user password reset.// (POST /auth/password-reset)
	PostAuthPasswordReset(ctx echo.Context, params PostAuthPasswordResetParams) error
	// Confirm user password reset.// (POST /auth/password-reset-confirm)
	PostAuthPasswordResetConfirm(ctx echo.Context, params PostAuthPasswordResetConfirmParams) error
	// Creates a new user account.// (POST /auth/register)
	PostAuthRegister(ctx echo.Context) error
	// Resend verification email to currently logged in user.// (POST /auth/resend-verification-email)
	PostAuthResendVerificationEmail(ctx echo.Context, params PostAuthResendVerificationEmailParams) error
	// Activate user account.// (POST /auth/user-confirm)
	PostAuthUserConfirm(ctx echo.Context, params PostAuthUserConfirmParams) error
	// Health Check// (GET /healthcheck)
	HealthCheck(ctx echo.Context) error
	// Get users// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Adds a new User// (POST /users)
	CreateUser(ctx echo.Context) error
	// Single user// (GET /users/{id})
	GetUser(ctx echo.Context, id Id) error
	// Update a user information// (PUT /users/{id})
	UpdateUser(ctx echo.Context, id Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthEmailChange converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthEmailChange(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthEmailChangeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Type" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Type")]; found {
		var ContentType string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Type, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Content-Type", valueList[0], &ContentType)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Type: %s", err))
		}

		params.ContentType = ContentType
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Type is required, but not found"))
	}
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Authorization", valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthEmailChange(ctx, params)
	return err
}

// PostAuthEmailChangeConfirm converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthEmailChangeConfirm(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthEmailChangeConfirmParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Type" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Type")]; found {
		var ContentType string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Type, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Content-Type", valueList[0], &ContentType)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Type: %s", err))
		}

		params.ContentType = ContentType
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Type is required, but not found"))
	}
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Authorization", valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthEmailChangeConfirm(ctx, params)
	return err
}

// PostAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogin(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthLoginParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Type" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Type")]; found {
		var ContentType string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Type, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Content-Type", valueList[0], &ContentType)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Type: %s", err))
		}

		params.ContentType = ContentType
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Type is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthLogin(ctx, params)
	return err
}

// PostAuthPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthPasswordReset(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthPasswordResetParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Type" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Type")]; found {
		var ContentType string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Type, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Content-Type", valueList[0], &ContentType)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Type: %s", err))
		}

		params.ContentType = ContentType
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Type is required, but not found"))
	}
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Authorization", valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthPasswordReset(ctx, params)
	return err
}

// PostAuthPasswordResetConfirm converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthPasswordResetConfirm(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthPasswordResetConfirmParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Type" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Type")]; found {
		var ContentType string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Type, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Content-Type", valueList[0], &ContentType)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Type: %s", err))
		}

		params.ContentType = ContentType
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Type is required, but not found"))
	}
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Authorization", valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthPasswordResetConfirm(ctx, params)
	return err
}

// PostAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRegister(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthRegister(ctx)
	return err
}

// PostAuthResendVerificationEmail converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthResendVerificationEmail(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthResendVerificationEmailParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Type" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Type")]; found {
		var ContentType string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Type, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Content-Type", valueList[0], &ContentType)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Type: %s", err))
		}

		params.ContentType = ContentType
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Type is required, but not found"))
	}
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Authorization", valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthResendVerificationEmail(ctx, params)
	return err
}

// PostAuthUserConfirm converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthUserConfirm(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthUserConfirmParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Content-Type" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Type")]; found {
		var ContentType string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-Type, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Content-Type", valueList[0], &ContentType)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-Type: %s", err))
		}

		params.ContentType = ContentType
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Content-Type is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthUserConfirm(ctx, params)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth/email-change", wrapper.PostAuthEmailChange)
	router.POST("/auth/email-change-confirm", wrapper.PostAuthEmailChangeConfirm)
	router.POST("/auth/login", wrapper.PostAuthLogin)
	router.POST("/auth/password-reset", wrapper.PostAuthPasswordReset)
	router.POST("/auth/password-reset-confirm", wrapper.PostAuthPasswordResetConfirm)
	router.POST("/auth/register", wrapper.PostAuthRegister)
	router.POST("/auth/resend-verification-email", wrapper.PostAuthResendVerificationEmail)
	router.POST("/auth/user-confirm", wrapper.PostAuthUserConfirm)
	router.GET("/healthcheck", wrapper.HealthCheck)
	router.GET("/users", wrapper.GetUsers)
	router.POST("/users", wrapper.CreateUser)
	router.GET("/users/:id", wrapper.GetUser)
	router.PUT("/users/:id", wrapper.UpdateUser)

}
